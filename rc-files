#!/bin/bash

# rc-files directory manager

warnings() {
    warn "add usage case for each function"
    warn "Concept only.
    documentation incomplete
    functions incomplete"
}

## configurations *********************************
bin_path="$HOME/rc-files"
DOMAIN="$HOME/rc-files"
# ***************************************************

# Define an associative array to store option descriptions
# TODO make function for this
declare -A option_descriptions=(
    [" "]="What happens if no arg given?"
    ["help"]="Display a help message"
    ["debug"]="Opens this script with \$EDITOR"
    ["git"]="Git commands"
    ["add"]="shorcut for bin git add"
    ["commit"]="shortcut for bin git commit"
    ["push"]="shortcut for bin git push"
    ["*"]="Default function"
)

main() {    
    case "$1" in
        "") default_fn ;;
        -h | h?lp  ) shift ; show_help ;; #TODO preserve order
        -D | d*bug ) shift ; debug_this_script ;; # Tested
        -g | git  ) shift ; execute_git "$@" ;;
        status | diff | add | commit) execute_git "$@" ;;
        push) shift ; push_to_remote "$@" ;;
        *) default_fn "$@" ;; #TODO
    esac

    # Process should not reach this point, if it does, maybe forgot exit
    echo -e "\e[31mERROR\e[0m" >&2
    exit 1
}

# Now add functions here in alphabetical order **********************************************

debug_this_script() {
    micro $0
    exit "$?"
}

default_fn() {
    warn "no argument means select all "
    warn "* means select all"
    warn "check if $1 matches the name of a table"
    warn "check if $1 matches the name of a column"
    warn "check if $1 is id or rowid"
    warn "check if $* has filter keywords"
    echo "SELECT * FROM $target_table"
    exit 1
}

execute_git(){
	git -C "$DOMAIN" "$@"
	exit "$?"
}


push_to_remote() {
    git -C "$DOMAIN" add .
    git -C "$DOMAIN" commit "$@"
    git -C "$DOMAIN" push
    exit "$?"
}

# Help function to display usage information and option descriptions
show_help() {
    # ANSI color codes for colors without using \e[33m and \e[31m
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Options:"
    for option in "${!option_descriptions[@]}"; do
        printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
    done
    exit 0
}

show_usage() {
	warn 'edit aliases|variables|debug|help|...'
	exit 1
}

# Messages
warn(){ echo -e "\e[33m$@\e[0m"; }
err() { echo -e "\e[31m$@\e[0m" 1>&2; }

#warnings
main "$@" #<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

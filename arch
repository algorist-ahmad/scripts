#!/bin/bash

# Define an associative array to store option descriptions
declare -A option_descriptions=(
    [" "]="Conduct fuzzy search of archives using fzf"
    ["--help"]="Display this help message"
    ["debug"]="Open the script with $EDITOR"
    ["edit"]="Edit document"
    ["git"]="Git commands"
    ["sync"]="Pushes changes to Github"
    ["tree"]="Display the directory tree"
    ["warp"]="[Not implemented] cd to chosen directory"
    ['<command>']="Executes bultin shell command in archives"
    ['<pattern>']="Searches for pattern in tree"
)

# config
archives_path="$HOME/archives"
path=$archives_path

# TESTS:
# no arg: passed
# help: passed
# dev: passed
# edit: fail
# tree: passed
# warp: fail
# execute: fail
# launch: pass

main() {
    #warning "This is a warning"
    
    if [ $# -eq 0 ]; then arch_fzf; fi

    case "$1" in
        ~d | d*bug ) open_this_file ;;
        -h | *help ) show_help ;;
        -c | bash  ) shift ; execute_command "$@" ;;
        -g | git   ) shift ; execute_git "$@" ;;
        -l | ls    ) list ;;
        -s | sync  ) push_to_github ;;
        -t | tree  ) arch_tree ;;
        -w | warp  ) cd_to_directory ;;
        # bash shortcuts
        echo | mkdir | touch | rmdir | rm | bat | cat | yq | md | jq) execute_command "$@" ;;
        # git shortcuts
        diff | status | add | commit | push | pull ) execute_git "$@" ;;
        *) launch_search "$@" ;;
    esac

    echo -e "\e[31mERROR\e[0m" >&2
    exit 1
}

arch_fzf() {
    output=$(find "$archives_path" -type f -o -type d | fzf)
    es="$?"
    echo "ðŸ“‹ $style1$output$reset"ac
    echo "$output" | xclip -selection clipboard
    exit $es
}

arch_tree() {
    tree "$archives_path"
    exit "$?"
}

execute_command() {
    warn "Not tested"
    if [[ "$1" == '-c' ]]; then shift ; fi
    # Change directory to ~/arch and execute the provided shell commands
    (cd "$path" && eval "$@")
    exit $?
}

execute_git(){
	echo -e "CURRENT LOCATION: $path"
	git -C "$path" "$@"
	exit "$?"
}

# Help function to display usage information and option descriptions
help() {
    # ANSI color codes for colors without using \e[33m and \e[31m
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Options:"
    for option in "${!option_descriptions[@]}"; do
        printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
    done
    exit 0
}

launch_search() {
    pattern=""
    
    for arg in "$@"; do
        if [ -z "$pattern" ]; then
            pattern="*$arg*"
        else
            pattern="$pattern|*$arg*"
        fi
    done
    
    # Search using tree command
    output=$(tree $archives_path -C --dirsfirst --prune --matchdirs -P "$pattern")
    
    # Check if the output contains any directories or files
    if [[ $output == *"0 directories, 0 files"* ]]; then
        warn "No match."
        exit 0
    else
        echo "$output"
        exit 0
    fi
}

list() {
    cd $path
    pwd
    ls
    exit 0
}

open_chosen_file() {
    warn Not tested
    # Use eval to expand wildcard pattern in $2
    files=$(eval "ls -d $archives_path/$2")
    
    # Check if any files match the pattern
    if [ -n "$files" ]; then
        # Iterate over the matched files and edit them with the $EDITOR
        for file in $files; do
            $EDITOR "$file"
        done
        exit $?
    else
        echo -e "\e[31mNo matching files found.\e[0m"
        exit 1
    fi
}

open_this_file() {
    micro $0
    exit "$?"
}

push_to_github() {
    git -C $archives_path add .
    git -C $archives_path commit -m "sent from $NAME"
    git -C $archives_path push
    exit "$?"
}

show_help() {
    warn "    ~d | d*bug ) open_this_file ;;
    -h | *help ) show_help ;;
    -c | bash  ) shift ; execute_command "$@" ;;
    -g | git   ) shift ; execute_git "$@" ;;
    -l | ls    ) list ;;
    -s | sync  ) push_to_github ;;
    -t | tree  ) arch_tree ;;
    -w | warp  ) cd_to_directory ;;
    # bash shortcuts
    echo | mkdir | touch | rmdir | rm | bat | cat | yq | md | jq) execute_command "$@" ;;
    # git shortcuts
    diff | status | add | commit | push | pull ) execute_git "$@" ;;
    *) launch_search "$@" ;;"
    exit 0
}

warn() { echo -e "\e[33m$@\e[0m"; }

main "$@"

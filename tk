#!/bin/bash

# This is a `task` decorator.

# configs ************************************************************************************
DOMAIN="$DATA_SOURCE/tasks"
DEBUG="$DOMAIN/.debug"
DEBUG=0  # save settings in json
CONFIG="$HOME/config/.taskrc"
TASK_LIMIT=10
# ********************************************************************************************

# Define an associative array to store option descriptions
declare -A option_descriptions=(
    [" "]="Display at most 10 tasks"
    ["courses"]="Shows you courses"
    ["debug"]="Develop this script"
    ["help"]="Display a help message"
    ["open"]="cd to task's directory [Not implemented]"
    ["sync"]="Synchronize with Github"
    ["*"]="Any other patterns executes as task *"
)

main() {

	clear -x

    # main options
    case "$1" in
        "") list_tasks ;;
        config) shift ; edit_taskrc "$@" ;;
        debug)  shift ; edit_code "$@" ;;
        help)   print_help ;;
        open)   shift ; open_associated_file ; exit 1 ;;
        sync)   synchronize ;;
        push)   push_to_github "Sent from $HOSTNAME" ;;
        git | -g) shift ; execute_git "$@" ;;
        add) shift; add_task "$@" ;;
        +) shift; add_task_interactively ;;
        # mod) shift; mod_task_interactively "@" ;; # doesn't work
    esac

    # shortcuts
    case "$1" in
        courses) show_courses ;;
        todo) list_scheduled_today ;;
    esac

    # catch-all
    case "$1" in
        *) execute_and_push "$@" ;;
    esac
}

# Now add functions here in alphabetical order **********************************************

add_task() {
    if [[ -z "$@" ]]; then add_task_interactively; fi
    task add "$@"
    exit "$?"
}

add_task_interactively() {
    warn "DESCRIPTION +tag proj:   pri:   recur:   sch:   due:   dir:   file:   "
    task=$(cat)
    task add $task
    exit "$?"
}

edit_taskrc() {
    "$EDITOR" "$CONFIG"
    exit 0
}

execute_git() {
    git -C "$DOMAIN" "$@"
    exit "$?"
}

execute_and_push() {
    task "$@"
    case "$1" in
        ad*|mod*|edit|done|undo|del*) push_to_github "$@" ;;
        start|stop|done) list_active_tasks ;;
        *) exit "$?";;
    esac
}

list_tasks() {
    out=$(task active 2>&1)
    task limit:$TASK_LIMIT
    exit "$?"
    if [[ "$out" == *"No matches."* ]]; then
        warn "No active tasks currently"
    fi
}

list_scheduled_today() {
    task scheduled:today or +todo or +TODO or +next
    exit "$?"
}

mod_task_interactively() {
    if [[ $# -eq 0 ]]; then
        warn "Which ones to update?"
        targets=$( cat )
        tk \~ $targets
    else
        task next "$@"
        warn "Modify which? [DESCRIPTION, proj, tags, pri, recur, sch, due, dir, file]"
        modifications=$( cat )
        tk "$@" mod $modifications
    fi
}

print_help(){
    echo "
    case "$1" in
        "") list_active_tasks ;;
        config) shift ; edit_taskrc "$@" ;;
        debug)  shift ; edit_code "$@" ;;
        help)   print_help ;;
        open)   shift ; open_associated_file ; exit 1 ;;
        sync)   synchronize ;;
        push)   push_to_github "Sent from $HOSTNAME" ;;
        git | -g) shift ; execute_git "$@" ;;
        +) shift; add_task_interactively ;;
        # mod) shift; mod_task_interactively "@" ;; # doesn't work
    esac

    # shortcuts
    case "$1" in
        courses) show_courses ;;
        todo) list_scheduled_today ;;
    esac

    # catch-all
    case "$1" in
        *) execute_and_push "$@" ;;
    esac"
}

# Help function to display usage information and option descriptions
# print_help() {
#     # ANSI color codes for colors without using \e[33m and \e[31m
#     GREEN='\033[0;32m'
#     BLUE='\033[0;34m'
#     NC='\033[0m' # No Color

#     echo "Usage: $(basename "$0") [OPTIONS]"
#     echo -e "\e[96mAdditional functonality to TaskWarrior's task\e[0m"
#     echo -e "For greater help, do task help"
#     for option in "${!option_descriptions[@]}"; do
#         printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
#     done
#     exit 0
# }

edit_code() {
    if [[ -n "$1" ]]
        then editor="$1"
        else editor="micro"
    fi
    "$editor" "$0"
    exit "$?"
}

push_to_github() {
    git -C $target add .
    git -C $target commit -m "'$*'" > /dev/null
    git -C $target push
    exit "$?"
}

show_courses() {
    tk next +course
}

synchronize() {
    output=$(git -C "$DOMAIN" pull --rebase)
    # Check if the output contains "Already up to date."
    if [[ "$output" == "Already up to date." ]]; then
        # warn "Already up to date. Pushing changes..."
        push_to_github "Sent from $NAME"
    else
        echo "Changes found. Was pull successful\?"
    fi
}

warn() { echo -e "\e[33m$@\e[0m"; }

# pass comands to TaskWarrior
main "$@"

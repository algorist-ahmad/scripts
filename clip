#!/bin/bash

# Spreadsheets manager

# declare -A DEFAULTS=()
# declare -A FILES=()

declare -A ERROR=(
    [11]="No such file"
)

declare -A NAMESPACE=(
    [error]=0
    [args]="$@"
    [debug]=0
    [file]=0
    [piped]=""
    [clipboard_command]='xclip -selection clipboard'
)

#########################################################

main() {
    initialize   # setup environment and check for missing files
    dissect "$@" # break input for analysis
    validate     # validate the operation
    dispatch     # execute the operation
    terminate    # execute post-script tasks regardless of operation
}

initialize() {
    # echo "Setting up environment"
    # echo "Checking for missing variables or files"
    FLAG[error]=0
}

dissect() {

    LAST_OPTION=''
    
    # Iterate over arguments using a while loop
    while [[ $# -gt 0 ]]; do
        case "$1" in
            debug | --debug)
                NAMESPACE[debug]=1 ;
                ;;
            file? | -f)
                NAMESPACE[file]=1 ;
                LAST_OPTION='file'
                ;;
            *)
                text_or_file "$1" ;
                ;;
        esac
        # discard argument
        shift
    done
}

validate() {
  nothing=here
}

dispatch() {

    if [[ "${FLAG[error]:-0}" -gt 0 ]]; then
        echo "Error: ${ERROR[${FLAG[error]}]}" >&2
        exit "${FLAG[error]}"
    fi

    [[ ! -z "${NAMESPACE[piped]}" ]] && copy_and_save_to_file
    [[ "${NAMESPACE[file]}" -eq 1 ]] && copy_file_content
    
    # ...else
    #     echo "Error: No valid operation specified." >&2
    #     exit 1
    # fi
}

terminate() {
    reveal_variables
    help_if_no_arg
}

print_dir() {
    echo "${FILES[data]}" | xclip -selection clipboard
    echo "${FILES[data]}"
    echo "(copied)"
}

list_if_no_arg() {
     [[ "${NAMESPACE[args]}" == "" ]] && NAMESPACE[select]=1
}

help_if_no_arg() {
    if [[ "${NAMESPACE[args]}" == "" && -z "${NAMESPACE[piped]}" ]]; then
       echo 'Usage:'
       echo 'clip [-f] TEXT | FILES'
       echo 'echo "" | clip'
    fi
    exit 0
}

reveal_variables() {
    if [[ NAMESPACE['debug'] -eq 1 ]]; then
        # Loop through the keys of the associative array and print key-value pairs
        echo -e "\nDEBUG:"
        for key in "${!NAMESPACE[@]}"; do
            echo "$key=${NAMESPACE[$key]}"
        done
    fi
}

text_or_file() {
  nothing=here
}

copy_file_content() {
  echo "idk what to do :("
}

copy_and_save_to_file() {
  timestamp=$(date +%H.%M.%S)
  tempfile="/tmp/clip.${timestamp}"
  clipped_text="${NAMESPACE[piped]}"
  clipboard_command="${NAMESPACE[clipboard_command]}"

  # save content to file
  echo "$clipped_text" > "$tempfile"
  # save content to clipboard
  echo "$clipped_text" | $clipboard_command
}

# Capture piped input
[[ ! -t 0 ]] && NAMESPACE[piped]=$(cat)

# Main function
main "$@"

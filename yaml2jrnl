#!/bin/bash

if [[ "$1" == 'debug' ]]; then
  shift
  set -x
fi

set -euo pipefail

VERSION='0.0.0'

# CONVERT
# 
#   uuid: 00000000 # auto-gen
#   encrypted: false
#   starred: false
#   tags: []  # choose insight, todo, or custom
#   datetime: # YYYY-MM-DD hh:mm
#   title:    # optional
#   body: ""  # 
# 
# TO 
# 
# [2025-05-25 12:40] <00000000> TITLE HERE *
# LOREM IPSUM DOLOR SIT AMET
# @tag1 @tag2

ROOT="$(dirname "$(readlink -f "$0")")"
TMPDIR=/tmp/yaml2jrnl
ARGS_INPUT=$@
ARGS_STDIN=

[[ ! -t 0 ]] && \
ARGS_STDIN=$(cat) # piped input

main() {

  create_dir_if_not_exists "$TMPDIR"
  
  # Handle version options in arguments
  for arg in $ARGS_INPUT; do
    case "$arg" in
      --version|-v)
        show_version
        exit 0
        ;;
    esac
  done

  if ! _empty "$ARGS_STDIN"; then
  set -x
    tempfile=$(save_to_temp_file 'yml' "$ARGS_STDIN")
    if is_valid_yaml "$tempfile"
    then convert_to_jrnl "$tempfile"
    fi
  elif ! _empty "$ARGS_INPUT"; then
    echo "ERROR: Input must be provided via stdin fow now, until file handling has been implemented"
    exit 1
  else
    echo "ERROR: No input provided"
    exit 1
  fi
}

create_dir_if_not_exists() {
  dir="$1"
  if [[ ! -d "$dir" ]]; then mkdir "$dir"; fi
}

# first arg must be file extension
save_to_temp_file() {
  ext=$1 ; shift
  tmpfile=$(mktemp "$TMPDIR/XXXX.$ext")
  echo "$@" > $tmpfile
  exit 22
}

convert_yaml_to_jrnl() {
  save_input_to_file
  # Extract YAML fields using yq
  local uuid encrypted starred tags datetime title body

  uuid=$(echo "$ARGS_STDIN" | yq eval '.uuid // ""' -)
  datetime=$(echo "$ARGS_STDIN" | yq eval '.datetime // ""' -)
  body=$(echo "$ARGS_STDIN" | yq eval '.body // ""' -)
  title=$(echo "$ARGS_STDIN" | yq eval '.title // ""' -)
  starred=$(echo "$ARGS_STDIN" | yq eval '.starred // false' -)
  tags=$(echo "$ARGS_STDIN" | yq eval '.tags // [] | join(" ")' -)

  # Check required fields
  if [[ -z "$uuid" ]]; then
    echo "ERROR: missing uuid"
    exit 1
  fi
  if [[ -z "$datetime" ]]; then
    echo "ERROR: missing datetime"
    exit 1
  fi
  if [[ -z "$body" ]]; then
    echo "ERROR: missing body"
    exit 1
  fi

  # Build header line components
  local header="[${datetime}] <${uuid}>"
  [[ -n "$title" ]] && header+=" ${title}"
  [[ "$starred" == "true" ]] && header+=" *"

  # Build tags line
  local tags_line=""
  if [[ -n "$tags" ]]; then
    IFS=' ' read -ra tag_array <<< "$tags"
    for tag in "${tag_array[@]}"; do
      tags_line+="@${tag} "
    done
    tags_line="${tags_line%% }"
  fi

  # Output jrnl format
  echo "$header"
  echo "$body"
  [[ -n "$tags_line" ]] && echo "$tags_line"
}

show_version() { echo -e "$VERSION" ; }

_empty() { [[ -z "$@" ]]; }

main

#!/bin/bash

# Repository updater

# configs ******************************************************************************************
DEBUG=1
DOMAIN="$HOME/bin"
# **************************************************************************************************

function main() {
    case "$1" in
        "") err "Which repository should I update?" ;;
        -h | help)  warn "update GIT_DIRECTORY [-add FILES]... [-commit COMMIT_MSG"] ;;
        -d | debug) shift; debug_code "$@" ;;
        *) _update "$@" ;;
    esac
}

_update() {
    debug "$1"
    truepath=$(realpath "$1")
    debug $truepath
    git -C "$truepath" remote -v update
    git_status=$(git -C "$truepath" status -uno)

    # case "$1" in
       # "*not a git repository*") git -C "$1" status -uno ;;
       # *"Untracked files:"*)              update_remote "$@" ;;
       # *"Changes not staged for commit"*) update_remote "$@" ;;
       # *"Changes to be committed"*)       update_remote "$@" ;;
       # *"Your branch is ahead"*)          update_remote "$@" ;;
       # *"Your branch is behind"*)         update_local  "$@" ;;
       # *"Your branch is up to date"*)     git -C "$1" status -uno ;;
       # *) err "No match found, what to do now?" ; exit 1 ;;
    # esac

    if [[ $git_status == *"not a git repository"* ]]; then
        git -C "$truepath" status -uno
    elif [[ $git_status == *"Untracked files:"* ]]; then
        update_remote "$1" "$2" "$3"
    elif [[ $git_status == *"Changes not staged for commit"* ]]; then
        update_remote "$1" "$2" "$3"
    elif [[ $git_status == *"Changes to be committed"* ]]; then
        update_remote "$1" "$2" "$3"
    elif [[ $git_status == *"Your branch is ahead"* ]]; then
        update_remote "$1" "$2" "$3"
    elif [[ $git_status == *"Your branch is behind"* ]]; then
        update_local
    elif [[ $git_status == *"Your branch is up to date"* ]]; then
        git -C "$true_path" status -uno
    fi
}

update_remote() {
    git -C "$1" add "$2"
    git -C "$1" commit -m "$3"
    git -C "$1" push
}

update_local() {
    # this is harmful!
    git -C "$1" pull
    # instead use
    # git config --global alias.up '!git remote update -p; git merge --ff-only @{u}'
}

test_remote() {
    exit 1
}

debug_code() {
    if [[ -n "$@" ]]
        then editor="$@"
        else editor="micro"
    fi
    "$editor" "$0"
    exit "$?"
}

# Help function to display usage information and option descriptions
print_help() {
    # ANSI color codes for colors without using \e[33m and \e[31m
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Options:"
    for option in "${!option_descriptions[@]}"; do
        printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
    done
    exit 0
}

debug() {
    # show debug message if enabled
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "\e[36m$@\e[0m"
    fi
}
warn() { echo -e "\e[33m$@\e[0m"; }
err()  { echo -e "\e[31m$@\e[0m" >&2; }

main "$@"

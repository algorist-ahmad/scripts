#!/bin/bash

# Configuration
SUCCESS_COLOR="\033[1;32m"
ERROR_COLOR="\033[1;31m"
WARNING_COLOR="\033[1;33m"
INFO_COLOR="\033[1;34m"
RESET="\033[0m"

# Initialize variables
declare -a repos_to_pull
declare -A fetch_results

fetch_all_repos() {
    echo -e "${INFO_COLOR}⏳ Fetching all repositories...${RESET}"
    
    # Read and process each repository
    while IFS='=' read -r repo_name repo_path; do
        # Skip comments and empty lines
        [[ "$repo_name" =~ ^# || -z "$repo_name" ]] && continue
        
        # Expand path (handle ~ and relative paths)
        full_path="${repo_path/#\~/$HOME}"
        full_path="${full_path/#\//$HOME/}"
        
        # Verify it's a git repo
        if [[ ! -d "$full_path/.git" ]]; then
            echo -e "${ERROR_COLOR}✗ $repo_name: Not a git repository${RESET}"
            continue
        fi
        
        # Run fetch in background
        (
            if git -C "$full_path" fetch --quiet >/dev/null 2>&1; then
                echo "$repo_name:success:$full_path"
            else
                echo "$repo_name:failed:$full_path"
            fi
        ) &
    done < "$STATUS_REPO_LIST"
    
    # Process results
    local count=0
    while read -r result; do
        IFS=':' read -r repo_name status full_path <<< "$result"
        
        case "$status" in
            success)
                echo -e "${SUCCESS_COLOR}✔ $repo_name fetched successfully${RESET}"
                fetch_results["$repo_name"]="$full_path"
                ;;
            failed)
                echo -e "${ERROR_COLOR}✗ $repo_name failed to fetch${RESET}"
                ;;
        esac
        
        ((count++))
    done < <(wait_and_collect)
    
    echo -e "${INFO_COLOR}✅ Finished fetching $count repositories${RESET}"
}

wait_and_collect() {
    # Wait for all background jobs and collect their output
    while [[ $(jobs -r | wc -l) -gt 0 ]]; do
        wait -n
    done
}

check_for_updates() {
    echo -e "\n${INFO_COLOR}🔍 Checking for updates...${RESET}"
    
    for repo_name in "${!fetch_results[@]}"; do
        local repo_path="${fetch_results[$repo_name]}"
        
        if git -C "$repo_path" status -sb | grep -q '\[.\+\(ahead\|behind\)\]'; then
            echo -e "${WARNING_COLOR}➤ $repo_name has updates available${RESET}"
            repos_to_pull+=("$repo_path")
        else
            echo -e "${SUCCESS_COLOR}✔ $repo_name is up-to-date${RESET}"
        fi
    done
}

pull_updates() {
    [[ ${#repos_to_pull[@]} -eq 0 ]] && return
    
    if gum confirm "${WARNING_COLOR}Do you want to pull updates for ${#repos_to_pull[@]} repositories?"; then
        echo -e "${INFO_COLOR}⏳ Pulling updates...${RESET}"
        
        for repo_path in "${repos_to_pull[@]}"; do
            (
                repo_name=$(basename "$repo_path")
                echo -e "${INFO_COLOR}🔄 Pulling $repo_name...${RESET}"
                if git -C "$repo_path" pull; then
                    echo -e "${SUCCESS_COLOR}✅ $repo_name updated successfully${RESET}"
                else
                    echo -e "${ERROR_COLOR}❌ $repo_name failed to update${RESET}"
                fi
            ) &
        done
        wait
    else
        echo -e "${INFO_COLOR}⏹ Update cancelled${RESET}"
    fi
}

main() {
    [[ -f "$STATUS_REPO_LIST" ]] || {
        echo -e "${ERROR_COLOR}Error: Repository list not found at $STATUS_REPO_LIST${RESET}"
        exit 1
    }
    
    fetch_all_repos
    check_for_updates
    pull_updates
}

trap 'echo -e "\n${ERROR_COLOR}🚫 Operation cancelled${RESET}"; exit 1' INT

main

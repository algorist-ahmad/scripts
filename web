#!/bin/bash

# Opens browser

 # - Launch Firefox and open a web page:
   # firefox https://www.duckduckgo.com
# 
 # - Open a new window:
   # firefox --new-window https://www.duckduckgo.com
# 
 # - Open a private (incognito) window:
   # firefox --private-window
# 
 # - Search for "wikipedia" using the default search engine:
   # firefox --search "wikipedia"
# 
 # - Launch Firefox in safe mode, with all extensions disabled:
   # firefox --safe-mode
# 
 # - Take a screenshot of a web page in headless mode:
   # firefox --headless --screenshot path/to/output_file.png https://example.com/
# 
 # - Use a specific profile to allow multiple separate instances of Firefox to run at once:
   # firefox --profile path/to/directory https://example.com/
# 
 # - Set Firefox as the default browser:
   # firefox --setDefaultBrowser


# Define an associative array to store option descriptions
declare -A option_descriptions=(
    [" "]="Opens today\'s journal in $VISUAL"
    ["help"]="Display a help message"
    ["debug"]="Opens this script with $EDITOR"
)

# configs
debug=1

# Main function
function main() {
    warn "--- bad documentation ---"
    # Case 1: If no arguments provided, open today's journal
    if [ "$#" -eq 0 ]; then
        warn "Not implemented"
        exit 1
    fi
    
    case "$1" in
        # help
        -h | h?lp | --help) show_help ;;
        #debug
        d?b?g | db?g) debug_this_script ;;
        # other
        *) search_web "$@" ;;
    esac

    # Process should not reach this point, if it does, maybe forgot exit
    echo -e "\e[31mERROR\e[0m" >&2
    show_usage
}

debug() {
    # show debug message if enabled
    if [[ $debug -eq 1 ]]; then
        echo -e "\e[36m$@\e[0m"
    fi
}

debug_this_script() {
    micro $0
    exit "$?"
}

# Function to get today's date in YYYY-MM-DD format
get_today_date() {
    date +"%Y-%m-%d"
}

# Function to join arguments with '+'
join_args_with_plus() {
    local joined_args=""
    for arg in "$@"; do
        joined_args+="$arg+"
    done
    # Remove the trailing '+'
    joined_args=${joined_args%+}
    echo "$joined_args"
}

# Function to open the journal file for today's date using the default editor
open_today_journal() {
    local today_date=$(get_today_date)
    local journal_file="$JOURNAL/$today_date"
    if [ -e $journal_file ]; then
        "$editor" "$journal_file" &
    else
        echo "# $(date +"%T")" > $journal_file
        "$editor" "$journal_file" &
    fi
}

# Function to open the journal file for a specific date
open_journal_for_date() {
    local journal_date="$1"
    local journal_file="$JOURNAL/$journal_date"
    if [ "$journal_date" = "$(get_today_date)" ]; then
        "$editor" "$journal_file" &
    else
        batcat "$journal_file"
    fi
}

push_to_github() {
    warn "--- Do not forget to pull first ---"
    git -C "$JOURNAL" add .
    git -C "$JOURNAL" commit -m "Sent from $NAME"
    git -C "$JOURNAL" push
    exit "$?"
}

search_web() {
    search_term=$(join_args_with_plus "$@")
    url="https://www.google.com/search?client=firefox-b-e&q=$search_term"
    firefox --new-tab "$url" 2>&1 > /dev/null &
    exit "$?"
}

show_entry() {
    debug "Receive \$1 is $1"
    batcat "$JOURNAL/$1"
    exit "$?"
}

# Help function to display usage information and option descriptions
show_help() {
    # ANSI color codes for colors without using \e[33m and \e[31m
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Options:"
    for option in "${!option_descriptions[@]}"; do
        printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
    done
    exit 0
}

show_usage() {
    # Display usage instructions if incorrect number of arguments provided
    echo "Usage:"
    echo "Case 1: $0"
    echo "Case 2: $0 <date>"
    exit 1
}

warn() { echo -e "\e[33m$@\e[0m"; }

git config --global user.name "Bytesmith Ahmad"

# Call the main function with provided arguments
main "$@"

#!/bin/bash

# get anything I want

# warnings() {}

# CONFIG ***************************************************************************************
	# toggle debugging info
		DEBUG=1
	# area of operation for this script
		DOMAIN="$HOME/.get"
	# default values
		#none
	

# Define an associative array to store option descriptions
# TODO make function for this
declare -A option_descriptions=(
    [" "]="What happens if no arg given?"
    ["help"]="Display a help message"
    ["debug"]="Opens this script with \$EDITOR"
    ["*"]="Default function"
)

main() {
    if [ $# -eq 0 ]; then list_options; fi

    case "$1" in
        debug   | -d) debug_this_script ;;
        help    | -h) shift ; show_help "@" ;;
        connection | database | table) sql get ;;
        context) context get ;;
        os | system) echo "WSL (THIS IS AN EXAMPLE ONLY.)" ; exit 0 ;;
        *) unknown_arg_interpreter "$@" ;;
    esac

    # Process should not reach this point, if it does, maybe forgot exit
    echo -e "\e[31mERROR\e[0m" >&2
    exit 1
}

# Now add functions here in alphabetical order **********************************************

connect_db() {
    # Case 1: $ sql connect
        # No connection. > Connect? [y/n]
            # y > fzf > msg > exit
            # n > exit
        # Yes connection > Connected to $(cat ~/.sql/connection). Found <#> tables. <None|<selection>> selected.
            # No tables  > create one?
                # y > launch gui > exit
                # n > exit
            # Yes tables
                # Not selected > select table?
                    # y > launch_menu
                    # n > exit
                # Selected > exit
    # Case 2: $ sql connect <path>
        # > Connect to <path>?
            # no > exit
            # yes > attempt connection > handle extra cases...
    if [ $# -eq 0 ]; then
        is_connected=$(test_connection)
        debug "is_connected = $is_connected"
        if [[ is_connected -eq 0 ]]
            then connect_dialog=1
            else find_tables=1
        fi
    else
		warn "unchecked db, proceed at your own risk"
        db="$1"
    fi

    if [[ connect_dialog -eq 1 ]]; then
        echo "you have reached the connect  dialaog. Conenct? [y/n] "
        warn "assuming yes..."
        warn "launching fuzzy search, please select database..."
        db=$(find "$HOME" -type f -name "*.db" | fzf)
    fi
    if [[ find_tables -eq 1 ]]; then
        echo "now I should be finding the tables if any"
    fi
	# echo $db > "$home/connection"
	# echo "Connected to $db"
	# execute_query -c "$db" -m "list" -q "$sqite_version_query"
	# execute_query -c "$db" -m "list" -q "$query1"
	# exit "$?"
}

debug_this_script() {
    micro $0
    exit "$?"
}

default_function() {
    warn "Does connection exists?"
    # test_connection
    warn "Do tables exists?"
    # list_tables
    warn "Are tables selected?"
    # test_selection
    warn "What does user want?"
    connected=$(test_connection)
	debug "connected is $connected"
	if [[ $connected -eq 0 ]]; then
		warn "Not connected."
		prompt_connection
	else
		db=$(cat "$home/connection")
		warn "Connected to $db"
		# execute_query -c "$db" -m "list" -q "$sqite_version_query"
		execute_query -c "$db" -m "list" -q "$query1"
	fi
	err "error in default_function"
    exit 1
}

delete_sql() {
    warn "Desired Usage:"
    echo -e "
    sql delete <filter>
    sql delete -c [db] -t [table] <filter>
    
    where <filter> is a set of SQL conditions to be joined by AND/OR"

    warn "if no filter provided, do filter=\$(cat) as such:"
    echo "Provide filter (SQL conditions) [Ctrl+D]":
    filter=$(cat)
}

execute_query() {
	# sqlite3 -batch "$home/unnamed.db"                ".mode $mode" "$query" [most basic, db not provided]
	# sqlite3 -batch "path/to/.db"                         ".mode $mode" "$query" [db provided]
	# sqlite3 -batch "path/to/.db"          ".width x y z" ".mode $mode" "$query" [db+width provided]
	
	#example:
	# sqlite3 -batch "$HOME/archives/finances/finances.db" ".mode $mode" ".width 20 3 6 6 10 5 40 3" "select * from expenses"
	
	# defaults
	con=$DB
	mode=$MODE
	query="SELECT 'MISSING QUERY'"
	
	while [[ $# -gt 0 ]]; do
        case "$1" in
            -c)
                shift
                con="$1"
                ;;
            -m)
                shift
                mode="$1"
                ;;
            -w)
                shift
                widths="$1"
                ;;
            -q)
				shift
				query="$1"
				;;
            *)
                err "Unknown option: $1"
                exit 1
                ;;
        esac
        shift
    done

    # Output the values for debugging
    debug "Value of -c: $con"
    debug "Value of -m: $mode"
    debug "Value of -w: $widths"
	debug "Value of -q: $query"
	
	# TODO add width control
	sqlite3 "$con" ".mode $mode" "$query" -batch
}

_get() {
	if [ $# -eq 0 ]; then err "Missing attribute"; exit 1; fi

	case "$1" in
		conn* | db) cat "$home/connection" ; exit "$?" ;;
		tabl*) list_tables ; exit 1 ;;
		*) default_fn "$@" ;; #TODO
	esac
}

initialize() {
    debug "Initializing..."
    if [[ ! -d "$home" ]]; then
        mkdir "$home"
        touch "$home/connection";
    fi
}

input_query() {
	# Prompts user to enter an SQL query
	#TODO detect sql keywords and 
	echo "Enter SQL query (Ctrl+D when finished):" >&2
    query=$(cat)
	echo $query
}

insert_sql() {
    warn "Desired Usage:"
        echo -e "
        sql add
        sql add default
        sql add field1:value1 field2:value2 ..."
        
    if [ $# -eq 0 ]; then
        read -p "col1: " -t 9 col1
        warn "if empty, ABORT"
        read -p "col2: " -t 9 col2
        read -p "col3: " -t 9 col3
        read -p "col4: " -t 9 col4
        echo "$col1 $col2 $col3 $col4"
        exit 1
    fi
    
    case "$1" in
        def*) warn INSERT DEFAULT VALUES ; exit 1 ;;
        *) ;;
    esac
    
   warn "iterate and extract field:value"
   echo "$@" | cut -d':' -f1
   echo "$@" | cut -d':' -f2
}

list_tables() { #TODO may 20 ***********************************
    is_connected=$(test_connection)
    if [[ is_connected -eq 0 ]]; then
        warn "Not connected."
    else
		db=$(cat "$home/connection")
		debug "db=$db"
		debug "query= $table_list_query"
        execute_query -c "$db" -q "$table_list_query"
    fi
    exit "$?"
}

prompt_connection() {
    echo "Would you like to connect? [y/n]"
    err "syke, not implemented"
    exit 1
}

select_table() {
	if [[ $# -eq 0 ]]; then err "Missing argument [table]" ; exit 1 ; fi
	if [[ ! -d "$home" ]] || [[ ! -f "$home/connection" ]]; then warn "Not connected." ; exit 1 ; fi
	con=$(_get "connection")
	is_valid_table=$(test_is_table "$1")
	if [[ ! $is_valid_table -eq 1 ]]; then err "No such table in $con"; exit 1 ; fi
	echo "$1" > "$home/focal_table"
	exit "$?"
}

_set() {
    case "$1" in
        db) echo "set database $2" ;;
        ta??e*) echo "Set table/target $2" ;;
        *) echo "set $*" ;;
    esac
#    exit 1
}

# Help function to display usage information and option descriptions
show_help() {
    # ANSI color codes for colors without using \e[33m and \e[31m
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Options:"
    for option in "${!option_descriptions[@]}"; do
        printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
    done
    exit 0
}

show_usage() {
	warn 'edit aliases|variables|debug|help|...'
	exit 1
}

test_connection() {
	debug " --- Testing connection, return 1 if successful, 0 if not"
    con_file="$home/connection"
    if [[ ! -f "$con_file" ]]; then
        debug "$con_file does not exist"
        echo 0
	else
		con=$(cat "$con_file")
		debug "db name is $con"
		if [[ -z "$con" ]]; then echo 0
		else
            schema_version=$(execute_query -c "$con" -m "line" -q "$schema_version_pragma") 
            echo "$schema_version" >&2
			echo 1
		fi
	fi
	debug " --- Test over."
}

test_is_table() {
	err "Not implemented line 344"
}

unknown_arg_interpreter(){
    # for arg in args
    err 'Not implemented. What do u want?'
}

update_sql() {
    warn "Desired Usage:"
        echo -e "
        sql mod <filter> column1:value1 column2:value2 ..."
    warn "UPDATE <table> SET ( col1 [,col2,col3] = expr )... FROM <table> WHERE con1 AND/OR con2 AND/OR"
}

# Messages
debug() { if [[ $DEBUG -eq 1 ]]; then echo -e "\e[34m$@\e[0m" >&2; fi }
err() { echo -e "\e[31m$@\e[0m" 1>&2; }
warn(){ echo -e "\e[33m$@\e[0m"; }

# warnings
main "$@" #<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

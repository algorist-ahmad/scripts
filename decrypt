#!/bin/bash

#TODO: add --in-place option to replace encrypted file with non-encrypted
#TODO: when decrypting file, also create or append to .gitignore file to avoid accidental tracking

yel="\e[33m"
red="\e[31m"
bold="\e[1m"
none="\e[0m"
key="O──┬┬"

main(){
  print_help_if_no_args "$@"
  
  for file in $@; do
    is_exist $file
    _decrypt $file
  done
}

print_help_if_no_args() {
  [[ $# -eq 0 ]] && echo -e "$yel""To decrypt files:$bold decrypt [options] <file>...$none"
}

# verify that file exists, return 1 if not exists, 0 if it does
# FIXME: if file not exists, should continue instead of dead stop
is_exist() {
  if [[ ! -e "$1" ]]; then
    >&2 echo -e "$yel""file $1 does not exist, following files ignored (BUG:FIXME)$none"
    # return 1 # experimental
    exit 1
  fi
  return 0
}

# sending to tmp outside of repo is safer to avoid accidental tracking. To decrypt inplace, must
# add file to .gitignore
_decrypt() {
  # send output to tmpfile
  tmp_file=$(mktemp -t decrypted.XXXX)
  gpg --decrypt --quiet "$file" > $tmp_file
  if [[ $? -eq 0 ]]; then
    >&2 echo -e "$bold$file $none $yel$key $none $bold$tmp_file $none"
  else
    >&2 echo -e "$red$bold""fail""$none"
  fi
}

_decrypt_in_place() {
  # decrypt and output to file minus '.gpg' extension
  # then add same file to .gitignore
  encrypted_file="$1"
  decrypted_file="$(remove_gpg_extension \"$encrypted_file\")"
  gpg --decrypt --quiet "$encrypted_file" > "$decrypted_file"
  add_to_gitignore "$decrypted_file"
  echo "{\"error\":\"not implemented\",\"args\":\"$@\"}"
}

main "$@"

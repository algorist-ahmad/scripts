#!/bin/bash

# Path to the file containing repository paths
REPOS_FILE="$STATUS_REPO_LIST"

yellow="\e[93m"
_0="\e[0m"
separator="********************************************************************************"
checkmark="‚úÖ"
cross="‚ùå"
ahead_behind="üîÑ"

main() {
    if [[ ! -f "$REPOS_FILE" ]]; then echo "$REPOS_FILE not found. Create one."; exit 1; fi
    
    # clear -x
    echo -e "Fetching..."

    while IFS='=' read -r key value; do
        # skip lines which begin with '#'
        [[ "$key" =~ ^# ]] && continue
        
        # Skip empty lines or lines that don't contain '='
        [ -z "$key" ] || [ -z "$value" ] && continue

        # Remove leading and trailing whitespace from key and value
        key=$(echo "$key" | xargs)
        value=$(echo "$value" | xargs)

        if [[ ! -d "${HOME}${value}" ]]; then echo "${HOME}${value} does not exists"; continue; fi

        check_git_status "${HOME}${value}" "$key" "$1"
  
    done < "$REPOS_FILE"
}

# Function to check if the output is empty and perform 'git status' accordingly
function check_git_status() {
    local repo_dir="$1"
    local repo_name="$2"
    local verbose="$3"
    
    # Fetch the latest updates from the remote
    git -C "$repo_dir" fetch > /dev/null 2>&1
    
    local status_output=$(git -C "$repo_dir" status -s)
    local ahead_behind_output=$(git -C "$repo_dir" status -sb | grep -E 'ahead|behind')

    if [[ -z "$status_output" && -z "$ahead_behind_output" ]]; then
        # Repo is clean and up to date
        printf "%-12s: %s\n" "$repo_name" "$checkmark"
    else
        # Repo is either ahead/behind or has uncommitted changes
        printf "%-12s: %s\n" "$repo_name" "$cross"
        if [[ -n "$ahead_behind_output" ]]; then
            printf "  %-10s: %s\n" "Outdated" "$ahead_behind"
        fi
        if [[ $verbose == '-v' ]]; then
            git -C "$repo_dir" status -s
        fi
    fi
}

main "$1"

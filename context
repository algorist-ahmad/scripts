#!/bin/bash

# Set the context of operation, for example: home, work, school, etc.

# warnings() {}

# CONFIG ***************************************************************************************
	# toggle debugging info
		DEBUG=1
	# area of operation for this script
		CONTEXT="$HOME/.context"
	# default values
		#none

# Define an associative array to store option descriptions
# TODO make function for this
declare -A option_descriptions=(
    [" "]="What happens if no arg given?"
    ["help"]="Display a help message"
    ["debug"]="Opens this script with \$EDITOR"
    ["*"]="Default function"
)

main() {
    if [ $# -eq 0 ]; then list_options; fi

    case "$1" in
        debug   | -d) debug_this_script ;;
        help    | -h) shift ; show_help "@" ;;
        get) shift; get_context "$@" ;;
        set) shift; set_context "$@" ;;
        *) unknown_arg_interpreter "$@" ;;
    esac

    # Process should not reach this point, if it does, maybe forgot exit
    echo -e "\e[31mERROR\e[0m" >&2
    exit 1
}

debug_this_script() {
    micro $0
    exit "$?"
}

get_context() {
    cat $CONTEXT
    exit "$?"
}

set_context() {
    warn "CONTEXT SET TO $1"
    echo "$1" > $CONTEXT
    exit "$?"
}

default_function() {
    warn "Does connection exists?"
    # test_connection
    warn "Do tables exists?"
    # list_tables
    warn "Are tables selected?"
    # test_selection
    warn "What does user want?"
    connected=$(test_connection)
	debug "connected is $connected"
	if [[ $connected -eq 0 ]]; then
		warn "Not connected."
		prompt_connection
	else
		db=$(cat "$home/connection")
		warn "Connected to $db"
		# execute_query -c "$db" -m "list" -q "$sqite_version_query"
		execute_query -c "$db" -m "list" -q "$query1"
	fi
	err "error in default_function"
    exit 1
}

# Help function to display usage information and option descriptions
show_help() {
    # ANSI color codes for colors without using \e[33m and \e[31m
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    echo "Usage: $(basename "$0") [OPTIONS]"
    echo "Options:"
    for option in "${!option_descriptions[@]}"; do
        printf "  ${GREEN}%-12s${NC} %s\n" "$option" "${option_descriptions[$option]}"
    done
    exit 0
}

show_usage() {
	warn 'edit aliases|variables|debug|help|...'
	exit 1
}

unknown_arg_interpreter(){
    # for arg in args
    err 'Not implemented. What do u want?'
}

# Messages
debug() { if [[ $DEBUG -eq 1 ]]; then echo -e "\e[34m$@\e[0m" >&2; fi }
err() { echo -e "\e[31m$@\e[0m" 1>&2; }
warn(){ echo -e "\e[33m$@\e[0m"; }

# warnings
main "$@" #<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
